// <auto-generated />
using System;
using LibrarySystem.Data.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LibrarySystem.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20241231043223_seedDataInUserRole")]
    partial class seedDataInUserRole
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("LibrarySystem.Domain.Entities.ApplicationRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsMember")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "4b88c1d0-4256-4bb7-89d5-c0870ebeb512",
                            ConcurrencyStamp = "a35b1f95-30e6-4672-a3ce-e79528a4ccb8",
                            IsMember = false,
                            Name = "Seller",
                            NormalizedName = "SELLER"
                        },
                        new
                        {
                            Id = "aeeb9374-30dd-4e80-9feb-000783afe3bc",
                            ConcurrencyStamp = "882a39d8-f900-4b8f-860a-664d03fc929d",
                            IsMember = false,
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = "4a666d8a-96ae-45c5-9882-a1e043fdf49e",
                            ConcurrencyStamp = "346c0883-4e31-4c6b-a354-c107845d8135",
                            IsMember = true,
                            Name = "Member",
                            NormalizedName = "MEMBER"
                        });
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("UserName", "Email");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "db87724c-6e28-4a90-a1fd-3d8fe88475e6",
                            AccessFailedCount = 0,
                            Address = "Mansoura",
                            ConcurrencyStamp = "6a4590fd-cddc-4eed-b1c8-e01ddce5c064",
                            Email = "fathy.ali8ali@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fathy",
                            IsActive = true,
                            LastName = "Ali",
                            LockoutEnabled = false,
                            NormalizedEmail = "FATHY.ALI8ALI@GMAIL.COM",
                            NormalizedUserName = "MANAGER",
                            PasswordHash = "AQAAAAIAAYagAAAAEPklm/Ltfr+4YA6KCMrEy5jzHaBjk8O36UZjV2UMVTO+leHN8pBEMVJrNAOsZ+868g==",
                            PhoneNumber = "01009927286",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "c5461f60-2df9-4235-a040-0ffcfb579c41",
                            TwoFactorEnabled = false,
                            UserName = "Manager"
                        },
                        new
                        {
                            Id = "37597bc6-ffee-45d1-ad20-b53b66651c86",
                            AccessFailedCount = 0,
                            Address = "Mansoura",
                            ConcurrencyStamp = "0955ece4-848c-4929-9bf1-dcd548d93f97",
                            Email = "man.8man010099@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Fathy",
                            IsActive = true,
                            LastName = "Ali",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAN.8MAN010099@GMAIL.COM",
                            NormalizedUserName = "SELLER",
                            PasswordHash = "AQAAAAIAAYagAAAAEPklm/Ltfr+4YA6KCMrEy5jzHaBjk8O36UZjV2UMVTO+leHN8pBEMVJrNAOsZ+868g==",
                            PhoneNumber = "01556788707",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "94288f43-d8d2-4f7a-ba4d-d6893b2ad1fe",
                            TwoFactorEnabled = false,
                            UserName = "Seller"
                        });
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAvailable")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("bit")
                        .HasComputedColumnSql("CASE WHEN [Quantity] > 0 THEN CAST(1 AS BIT) ELSE CAST(0 AS BIT) END", false);

                    b.Property<decimal>("PriceForBorrow")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<decimal>("PriceForBuy")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<DateTime>("PublishedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Quantity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<string>("RandomImageName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("RandomTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Title")
                        .IsUnique();

                    b.ToTable("Books");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.BorrowedBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BorrowDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("FineId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("BorrowedBooks");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("CartId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Fine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BorrowBookId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BorrowBookId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Fines");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PaymentIntentId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("sessionId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("OrderType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("BookId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClaimType = "permissions",
                            ClaimValue = "books:get",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 2,
                            ClaimType = "permissions",
                            ClaimValue = "books:create",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 3,
                            ClaimType = "permissions",
                            ClaimValue = "books:update",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 4,
                            ClaimType = "permissions",
                            ClaimValue = "books:delete",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 5,
                            ClaimType = "permissions",
                            ClaimValue = "fines:get",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 6,
                            ClaimType = "permissions",
                            ClaimValue = "fines:create",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 7,
                            ClaimType = "permissions",
                            ClaimValue = "fines:update",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 8,
                            ClaimType = "permissions",
                            ClaimValue = "fines:delete",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 9,
                            ClaimType = "permissions",
                            ClaimValue = "borrowedBooks:get",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 10,
                            ClaimType = "permissions",
                            ClaimValue = "borrowedBooks:create",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 11,
                            ClaimType = "permissions",
                            ClaimValue = "borrowedBooks:return",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 12,
                            ClaimType = "permissions",
                            ClaimValue = "borrowedBooks:delete",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 13,
                            ClaimType = "permissions",
                            ClaimValue = "categories:get",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 14,
                            ClaimType = "permissions",
                            ClaimValue = "categories:create",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "permissions",
                            ClaimValue = "categories:update",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "permissions",
                            ClaimValue = "categories:delete",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "permissions",
                            ClaimValue = "authors:get",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "permissions",
                            ClaimValue = "authors:create",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "permissions",
                            ClaimValue = "authors:update",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "permissions",
                            ClaimValue = "authors:delete",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "permissions",
                            ClaimValue = "carts:get",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "permissions",
                            ClaimValue = "carts:add",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "permissions",
                            ClaimValue = "carts:remove",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "permissions",
                            ClaimValue = "orders:get",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "permissions",
                            ClaimValue = "orders:create",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "permissions",
                            ClaimValue = "orders:update",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 27,
                            ClaimType = "permissions",
                            ClaimValue = "orders:delete",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 28,
                            ClaimType = "permissions",
                            ClaimValue = "payments:get",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 29,
                            ClaimType = "permissions",
                            ClaimValue = "payments:create",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 30,
                            ClaimType = "permissions",
                            ClaimValue = "payments:update",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 31,
                            ClaimType = "permissions",
                            ClaimValue = "payments:delete",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 32,
                            ClaimType = "permissions",
                            ClaimValue = "users:get",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 33,
                            ClaimType = "permissions",
                            ClaimValue = "users:create",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 34,
                            ClaimType = "permissions",
                            ClaimValue = "users:update",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 35,
                            ClaimType = "permissions",
                            ClaimValue = "users:delete",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 36,
                            ClaimType = "permissions",
                            ClaimValue = "roles:get",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 37,
                            ClaimType = "permissions",
                            ClaimValue = "roles:create",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 38,
                            ClaimType = "permissions",
                            ClaimValue = "roles:update",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 39,
                            ClaimType = "permissions",
                            ClaimValue = "roles:delete",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            Id = 40,
                            ClaimType = "permissions",
                            ClaimValue = "books:get",
                            RoleId = "4a666d8a-96ae-45c5-9882-a1e043fdf49e"
                        },
                        new
                        {
                            Id = 41,
                            ClaimType = "permissions",
                            ClaimValue = "borrowedBooks:return",
                            RoleId = "4a666d8a-96ae-45c5-9882-a1e043fdf49e"
                        },
                        new
                        {
                            Id = 42,
                            ClaimType = "permissions",
                            ClaimValue = "categories:get",
                            RoleId = "4a666d8a-96ae-45c5-9882-a1e043fdf49e"
                        },
                        new
                        {
                            Id = 43,
                            ClaimType = "permissions",
                            ClaimValue = "authors:get",
                            RoleId = "4a666d8a-96ae-45c5-9882-a1e043fdf49e"
                        },
                        new
                        {
                            Id = 44,
                            ClaimType = "permissions",
                            ClaimValue = "carts:get",
                            RoleId = "4a666d8a-96ae-45c5-9882-a1e043fdf49e"
                        },
                        new
                        {
                            Id = 45,
                            ClaimType = "permissions",
                            ClaimValue = "carts:clear",
                            RoleId = "4a666d8a-96ae-45c5-9882-a1e043fdf49e"
                        },
                        new
                        {
                            Id = 46,
                            ClaimType = "permissions",
                            ClaimValue = "carts:operation",
                            RoleId = "4a666d8a-96ae-45c5-9882-a1e043fdf49e"
                        },
                        new
                        {
                            Id = 47,
                            ClaimType = "permissions",
                            ClaimValue = "orders:create",
                            RoleId = "4a666d8a-96ae-45c5-9882-a1e043fdf49e"
                        },
                        new
                        {
                            Id = 48,
                            ClaimType = "permissions",
                            ClaimValue = "orders:cancel",
                            RoleId = "4a666d8a-96ae-45c5-9882-a1e043fdf49e"
                        },
                        new
                        {
                            Id = 49,
                            ClaimType = "permissions",
                            ClaimValue = "orders:get",
                            RoleId = "4a666d8a-96ae-45c5-9882-a1e043fdf49e"
                        },
                        new
                        {
                            Id = 50,
                            ClaimType = "permissions",
                            ClaimValue = "payments:create",
                            RoleId = "4a666d8a-96ae-45c5-9882-a1e043fdf49e"
                        },
                        new
                        {
                            Id = 51,
                            ClaimType = "permissions",
                            ClaimValue = "books:get",
                            RoleId = "4b88c1d0-4256-4bb7-89d5-c0870ebeb512"
                        },
                        new
                        {
                            Id = 52,
                            ClaimType = "permissions",
                            ClaimValue = "books:create",
                            RoleId = "4b88c1d0-4256-4bb7-89d5-c0870ebeb512"
                        },
                        new
                        {
                            Id = 53,
                            ClaimType = "permissions",
                            ClaimValue = "books:update",
                            RoleId = "4b88c1d0-4256-4bb7-89d5-c0870ebeb512"
                        },
                        new
                        {
                            Id = 54,
                            ClaimType = "permissions",
                            ClaimValue = "books:delete",
                            RoleId = "4b88c1d0-4256-4bb7-89d5-c0870ebeb512"
                        },
                        new
                        {
                            Id = 55,
                            ClaimType = "permissions",
                            ClaimValue = "borrowedBooks:get",
                            RoleId = "4b88c1d0-4256-4bb7-89d5-c0870ebeb512"
                        },
                        new
                        {
                            Id = 56,
                            ClaimType = "permissions",
                            ClaimValue = "borrowedBooks:return",
                            RoleId = "4b88c1d0-4256-4bb7-89d5-c0870ebeb512"
                        },
                        new
                        {
                            Id = 57,
                            ClaimType = "permissions",
                            ClaimValue = "categories:get",
                            RoleId = "4b88c1d0-4256-4bb7-89d5-c0870ebeb512"
                        },
                        new
                        {
                            Id = 58,
                            ClaimType = "permissions",
                            ClaimValue = "authors:get",
                            RoleId = "4b88c1d0-4256-4bb7-89d5-c0870ebeb512"
                        },
                        new
                        {
                            Id = 59,
                            ClaimType = "permissions",
                            ClaimValue = "carts:get",
                            RoleId = "4b88c1d0-4256-4bb7-89d5-c0870ebeb512"
                        },
                        new
                        {
                            Id = 60,
                            ClaimType = "permissions",
                            ClaimValue = "carts:add",
                            RoleId = "4b88c1d0-4256-4bb7-89d5-c0870ebeb512"
                        },
                        new
                        {
                            Id = 61,
                            ClaimType = "permissions",
                            ClaimValue = "carts:remove",
                            RoleId = "4b88c1d0-4256-4bb7-89d5-c0870ebeb512"
                        },
                        new
                        {
                            Id = 62,
                            ClaimType = "permissions",
                            ClaimValue = "orders:get",
                            RoleId = "4b88c1d0-4256-4bb7-89d5-c0870ebeb512"
                        },
                        new
                        {
                            Id = 63,
                            ClaimType = "permissions",
                            ClaimValue = "orders:update",
                            RoleId = "4b88c1d0-4256-4bb7-89d5-c0870ebeb512"
                        },
                        new
                        {
                            Id = 64,
                            ClaimType = "permissions",
                            ClaimValue = "payments:get",
                            RoleId = "4b88c1d0-4256-4bb7-89d5-c0870ebeb512"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "db87724c-6e28-4a90-a1fd-3d8fe88475e6",
                            RoleId = "aeeb9374-30dd-4e80-9feb-000783afe3bc"
                        },
                        new
                        {
                            UserId = "37597bc6-ffee-45d1-ad20-b53b66651c86",
                            RoleId = "4b88c1d0-4256-4bb7-89d5-c0870ebeb512"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.ApplicationUser", b =>
                {
                    b.OwnsMany("LibrarySystem.Domain.Entities.RefreshToken", "RefreshTokens", b1 =>
                        {
                            b1.Property<string>("UserId")
                                .HasColumnType("nvarchar(450)");

                            b1.Property<int>("Id")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("int");

                            SqlServerPropertyBuilderExtensions.UseIdentityColumn(b1.Property<int>("Id"));

                            b1.Property<DateTime>("CreatesOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime>("ExpiresOn")
                                .HasColumnType("datetime2");

                            b1.Property<DateTime?>("RevokedOn")
                                .HasColumnType("datetime2");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("UserId", "Id");

                            b1.ToTable("RefreshTokens", (string)null);

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("RefreshTokens");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Book", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibrarySystem.Domain.Entities.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.BorrowedBook", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Entities.Book", "Book")
                        .WithMany("BorrowedBooks")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibrarySystem.Domain.Entities.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Cart", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Entities.ApplicationUser", "User")
                        .WithOne("Cart")
                        .HasForeignKey("LibrarySystem.Domain.Entities.Cart", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.CartItem", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibrarySystem.Domain.Entities.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Cart");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Fine", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Entities.BorrowedBook", "BorrowedBook")
                        .WithOne("Fine")
                        .HasForeignKey("LibrarySystem.Domain.Entities.Fine", "BorrowBookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibrarySystem.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Fines")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BorrowedBook");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Order", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.OrderItem", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibrarySystem.Domain.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Payment", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibrarySystem.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Review", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Entities.Book", "Book")
                        .WithMany("Reviews")
                        .HasForeignKey("BookId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LibrarySystem.Domain.Entities.ApplicationUser", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Book");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Entities.ApplicationRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LibrarySystem.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("LibrarySystem.Domain.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.ApplicationUser", b =>
                {
                    b.Navigation("Cart");

                    b.Navigation("Fines");

                    b.Navigation("Orders");

                    b.Navigation("Payments");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Book", b =>
                {
                    b.Navigation("BorrowedBooks");

                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.BorrowedBook", b =>
                {
                    b.Navigation("Fine");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Cart", b =>
                {
                    b.Navigation("CartItems");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Category", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("LibrarySystem.Domain.Entities.Order", b =>
                {
                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
